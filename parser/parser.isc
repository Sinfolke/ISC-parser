use end_of_rule: [ END, STRICT_END, NEWLINE ];
use comment: linear_comment;
use parralel_parsing;
spacemode mixed;    // make spaces and newlines to be automatically skipped unless directly specified within a rule
END: [;\n];         // lets you do not add a semicolon
STRICT_END: ';';    // forces to add a semicolon (usually for rules, tokens and datablocks)
NEWLINE: [\n];      // to be ended as a newline. Usually for properties in datablock
id: 
    ([0-9]* [a-zA-Z_] [a-zA-Z0-9_]*)
    data: $1;
;
spacemode:
    "spacemode" "mixed" | "skipped" | "allowed"
    data: %1;
;
linear_comment:
    '//' [^\n]
; 
main: Import | use | Rule | spacemode;

Import: 
    // import core/core.isc // single file import with exact extension
    // import core/core     // single file import without extension (first tryes to find the file with no extension, then with .isc extenison)
    // import [language/cpp] expr ID template preprocessor/directive/define // import from folder several files same time
    //      [another syntax of same action] import language/cpp [expr, ID, template, preprocessor/directive/define]
    // import language/cpp/data { INTLIT, BOOLLIT, STRLIT} // import some certain rules from the file
    // import language/cpp/data { INTLIT = INT, BOOLLIT = BOOL, STRLIT } // import certain rules from the file changing their incoming name in the current project
    // import [language/cpp] expr ID data { INTLIT = INT, BOOLIT = BOOL, STRLIT }, core/core.isc;


    'import' #file | #general_dir | #rulespecific (',' #file | #general_dir | #rulespecific)*
    data: [%2, ...%4];

    #path:
        [^*"<>|:?\.]+
        data: %1;
    ;
    #ext:
        ('.' ID)*
        data: %2;
    ;
    #file:
        path ext*
        data:
            path: %1
            ext: %2[%2.size() - 1]
            fullext: %2
            fullpath: %1 + %2.join()
        ;
    ;
    #general_dir:
        '[' path ']' file+
        data:
            path: %2,
            files: %4
        ;
    ;
    #rulespecific:
        file '{' (id ('=' id)? )+  '}'
        data:
            path: %1
            tokens: $1>%1
            tokens_current_name: $2>%2
        ;
    ;
;
use: 
    $object<string> data = {  %2.name: %2.value };
    for (int i = 0; i < $1>%2.size(); i++):
        data[$1>%2[i].name] = $1>%2[i].value;


    'use' #unit (',' #unit)*
    data: [%2, ...%4];
    #unit:
        id ANY_DATA?

        data:
            name: %1,
            value: %2,
;
