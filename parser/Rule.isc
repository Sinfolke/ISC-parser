/*
    A rule to match token and rule definions. They have same syntax but the token begins with
    the capslock and rules otherwise.

*/
Rule: 
    $name = %1;
    $rule = %3;
    $nested_rules = %4;
    $bool kind = (name[0] >= 'A' && name[0] <= 'Z') ? 'token' : 'rule';

    // later add match of CLL here
    &rule_begin(ID ':') (#rule)* #nested_rule* STRICT_END
    data:
        name: name,
        kind: kind,
        rule: rule,
        nestedRules: nested_rules 
    ;
    #rule: 
        $bool is_id = matched($3);
        $bool is_nested = matched($3>%1);
        $bool is_cll = !matched($1);
        $var val = is_id ? $3>%2 : $2;
        $char qualifier = matched(%3) ? %3.data : '';

        (( group | csequence | STRING | hex | bin | ( '#'? ID ) ) qualifier?) | cll

        data: 
            is_id: is_id,
            is_nested: is_nested,
            is_cll: is_cll,
            val: val,
            qualifier: qualifier
        ;
    ;
    #op:
        $data = $1;
        ( '|' | '&|' )
    ;
    #qualifier:
        data = $1;
        ('?' | '+' | '*')
    ;
    #group:
        $var name=$0>%1;
        $r=%4;

        ('&' ID )? '(' rule* ')'

        data: 
            variable: name,
            val: r
        ;
    ;
    #csequence:     // Character Sequence
        '[' &not '^'? &data ( #symbol | #diapason )* ']'
        data:
            type: 'csequence'
            not: matched(not)
            val: data
        ;
        #symbol:
            $data = $1;
            ('\\'   |   '\]' |  [^\]]) 
        ;
        #escape:
            $data = $1;
            // some escape chars like \s, \d
            '\\' \s0 (.)
        ;
        #diapason:
            ( &from (symbol) \s0 '-' \s0 &to (symbol))
            data: [from, to];
        ;
    ;
    #data_block:
        [\r\n]+ 'data' ':' &data ( ANY_DATA | #inclosed_map ) ';'
        #inclosed_map:
            &data(key+)
        ;
        #key:
            [\n\r]+ &name ID ':' &data (ANY_DATA)
            data:
                name: name
                val: data
            ;
        ;
    #nested_rule: 
        [\r\n]+ '#' \s0 Rule
        data: %3
    ;
    #hex:
        '0x' [1-9A-Fa-f]+
        data: %2;
    #bin:
        '0b' [01]+
        data: %2;
;