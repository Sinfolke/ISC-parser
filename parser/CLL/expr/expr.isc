/*
    This defines the expression.
*/

/*
    What patterns we have:
    fun(a, b, c)
    =a.find('abc');
    a && b
    a == 4 && b
    a == 4 && b == 4
    a == 4 and b == 4 && c != 4 and d != 4
    (a = 4) == 4 and (b = 4) == 4 && (c = 4) == 4 and (d = 4) == 4
    !(a = 4) == 4 and !(b = 4) == 4 && !(c = 4) == 4 and !(d = 4) == 4
    (! applied to (a = 4) and (b = 4))
    !(a = 4) == fun(abc) and !(b = 4) == (=a.find(abc)) && !(c = 4) == 4 and !(d = 4) == 4


    an expression must contain one of
        a data type
        a comparasion
            side must contain one of
                    a data type
                    an ID (variable), 
                    a function call
                    a method call
                    expr
        a function call
        a method call 
        a method call with no copy
*/

expr: 
    #logical | #compare | #arithmetic | #group | expr_copiable_method_call | cll_function_call | ANY_DATA

    #logical:
        compare LOGICAL_OP compare
    ;
    #compare:
        arithmetic (COMPARE_OP arithmetic)+
        data:
            first: %1
            operators: %2
            sequence: %3
        ;
    ;
    #arithmetic:
        for_arithmetic OP for_arithmetic
    ;
    #for_arithmetic:
        group | copiable_method_call | method_call | cll_function_call | ANY_DATA
    ;
    #group:
        '(' cll_ternary | expr ')'
    ;
    #expr_copiable_method_call:
        '(' copiable_method_call ')'
    ;
;