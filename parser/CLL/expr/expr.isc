/*
    This defines the expression.
*/

/*
    What patterns we have:
    fun(a, b, c)
    =a.find('abc');
    a && b
    a == 4 && b
    a == 4 && b == 4
    a == 4 and b == 4 && c != 4 and d != 4
    (a = 4) == 4 and (b = 4) == 4 && (c = 4) == 4 and (d = 4) == 4
    !(a = 4) == 4 and !(b = 4) == 4 && !(c = 4) == 4 and !(d = 4) == 4
    (! applied to (a = 4) and (b = 4))
    !(a = 4) == fun(abc) and !(b = 4) == (=a.find(abc)) && !(c = 4) == 4 and !(d = 4) == 4


    an expression must contain one of
        a data type
        a comparasion
            side must contain one of
                    a data type
                    an ID (variable), 
                    a function call
                    a method call
                    expr
        a function call
        a method call 
        a method call with no copy
*/

expr: 
    expr LOGICAL_OP expr |
    expr COMPARE_OP expr |
    expr OP expr |
    '(' expr ')'
    '(' copiable_method_call ')' |
    any_data
;
    

legacy_expr:
    '('? 
        (ANY_DATA | #compare | #logical* | cll_function_call | cll_method_call | #parenthesed)
    $if(matched(%1)) match(')');

    data: $1;

    #variable_value:
        var_refer ( ASSIGNMENT_OP (expr) )?
        data:
            name: %1
            op: %2
            val: %3
        ;
    ;
    #compare:
        #side | expr - compare COMPARE_OP | OP #side | expr - compare

        #side:
            var_refer | ANY_DATA | cll_function_call | method_call
            data: %1;
        ;
        data:
            right: %1
            op: %2
            left: %3
        ;
    ;
    #logical:
        expr - logical LOGICAL_OP expr - logical
        data:
            left: %1
            op: %2
            right: %3
        ;
    ;
    #parenthesed:
        '(' #variable_assignment | copy_method_call | cll_ternary ')'

        #variable_assignment:
            ID assignment_operator assignment_val
            data: 
                name: %1
                operator: %2
                val: %3
            ;
        ;
        data: %2;
    ;
    #NOT:
        '!' | 'not'
    ;
;
