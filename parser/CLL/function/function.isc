/*
    Functions are not considered a full part of the CLL.
    They are declared globally.
*/

private function_body(in_parenthes):
    '(' in_parenthes ')'
    $data = in_parenthes;
;
private function_in_parentheses(match_rule):
    match_rule?
    $if (matched(%0)):
        (',' match_rule)*
    data: [%1, %3];
;
function_body[call] = function_body(function_arguments);
function_body[decl] = function_body(function_parameters);
function_arguments = function_parenthes_part(ANY_DATA);
function_parameters = function_parenthes_part(ID);
cll_function_call:
    ID function_body[call];
;

function_decl: 
    $bool is_declaration_only;
    $bool is_typed;
    $size_t spaces = %1.size();
    $str fun_name;
    $str function_value;
    $arr<str> fun_type;


    \s* 'fn' (ID+) function_body[decl] 


    // get the function value if exists
    $if (not matched(STRICT_END)):
    $    is_declaration_only = false;
    $    skipup('\n');
    $    while (true):
    $       var current_spaces_amount = skipup(" ").size();
    $       if (current_spaces_amount > spaces):
    $           function_value += skipup('\n');
    $       else break;
    $else:
    $   is_declaration_only = true;
    // get the function type if exists
    $if ($1>%1.size() > 1):
    $   is_typed = true;
    $   fun_type = $1>%1;
    $   fun_name = fun_type.pop();
    $else:
    $   is_typed = false;

    STRICT_END?
    
    data:
        is_declaration_only: is_declaration_only
        is_typed = is_typed
        name: fun_name
        type: fun_type
        value: fun_value
;