# here are some predefined properties and flags for the build
# they are handled whenever you call isc in the current directory
# if a user specifies same flags in compile arguments these are overridden

file parser.isc
    import_type: all_in_dir
    lang: cpp
file preproc/preproc.isc
    import_type: all_in_dir
    lang: cpp

# if you want when a user specifies in argument same property to be merged with the current specify 'merge'
# keep in mind it works only for arrays, otherwise it'll throw a warning and ignore the keyword
# [default] means what is choosed by default if the property has not been specified
# [global] means this property can be applied only globally, not for a specific file

#import_type[ext]=["isc"]: (the way how to link up with other files)
#[ext]=["isc"] - what file extensions to import
#   all_in_folder - import everything located in the current folder
#   all_in_dir - import everything located in the current folder and other nested folders
#   disable - the any import is disabled, everything must be in the single file
#   [default] customised - only user-specified imports
#import:[] (specify files to be imported)
#import_dir[ext]=[".cll"]: [] (import all files in the certain dir)
#lang: the target language to output on
#out: the output dir
#out_wlib: (whether to output with linking to the std lib)
#   true - output with linking to the std lib
#   [default] false - output with std lib merged to the parser.
## If you put 'true' you'll have also to set up the library in your environment.
## for the each language it is unique thing. But your code would be more quick, readable and compact.
## If you chooose to merge into the output you won't have to worry how to link with library
## but it may be less efficient and compact especially when you have several seperate isc parsers
#flag[]:  (the compile flags)
#files[]: (the files to build automatically if user didn't specify any of them. By default all are build)
