class string_part_exception : public std::exception {
    // private:
    //     std::string mes;
    public:
    const char* what() const noexcept override {
        return 
        ISC_STD_LIBMARK "string_part_exception: the view() method has been called while the string_view is being uninitialised\n"
        _ISC_INTERNAL_ERROR_MARK;
    }
};
class Member_exception : public std::exception {
    public:
    const char *op, *mes;
    std::string error_mes;
    Member_exception(const char *op, const char *mes) : op(op), mes(mes) {
        error_mes = ISC_STD_LIBMARK "Member_exception: Member::";
        error_mes += op;
        error_mes += ": ";
        error_mes += mes;
    }
    const char* what() const noexcept override {
        return error_mes.c_str();
    }
};
/**
 * @brief A std::string_view class that forces to have an end position in the text and to remain a string_view uninitialised
 * 
 */
class string_part {
    private:
        std::string_view part;
    public:
    string_part(const char* start, const char* end) : part(start, (std::size_t) (end - start)) {}
    string_part(const char* start, const std::size_t& end) : part(start, end) {}
    string_part() {}

    const std::string_view& view() const {
        if (part.empty())
            throw string_part_exception();
        return part;
    }
    const std::string_view& set(const char* start, const char* end) {
        part = std::string_view(start, (std::size_t) (end - start));
        return part;
    }
    const std::string_view& set(const char* start, const std::size_t& end) {
        part = std::string_view(start, end);
        return part;
    }
};


template<class _RETURN_TOKEN, class _RETURN_RULE>
class Member {
    public:
    enum Type {
        STRING, RETURN_TOKEN, RETURN_RULE, NONE
    };
    Type type;
    char _data[biggest_sz<_RETURN_TOKEN, _RETURN_RULE, string_part>()]; // likely would be a sizeof(string_part) here
    auto& operator=(const string_part& mem) {
        type = Type::STRING;
        new (&_data) string_part(mem.view().data(), mem.view().length());
        return *this;
    }
    auto& operator=(const _RETURN_TOKEN& mem) {
        type = Type::RETURN_TOKEN;
        std::memcpy(_data, mem, sizeof(_RETURN_TOKEN));
        return *this;
    }
    auto& operator=(const _RETURN_RULE&  mem) {
        type = Type::RETURN_RULE;
        std::memcpy(_data, mem, sizeof(_RETURN_RULE));
        return *this;
    }
};
template<class _RETURN_TOKEN, class _RETURN_RULE, int SIZE>
class Members {
    private:
        Member<_RETURN_TOKEN, _RETURN_RULE> data[SIZE];
        int _size = 0;
    public:
    Members(const _return<_RETURN_TOKEN>*& ret) {
        data[0] = { Type::RETURN_TOKEN, ret };
        ++_size;
    }
    Members(const _return<_RETURN_RULE>*& ret) {
        data[0] = { Type::RETURN_RULE, ret };
        ++_size;
    }
    Members(const string_part*& str) {
        data[0] = { Type::STRING, str };
        ++_size;
    }
    Members() {}
    void push(const _return<_RETURN_TOKEN>* ret) {
        if (_size >= SIZE)
            throw Member_exception("push(Token)", "the member array is full");
        data[_size++] = { Type::RETURN_TOKEN, ret };
    }
    void push(const _return<_RETURN_RULE>* ret) {
        if (_size >= SIZE)
            throw Member_exception("push(Rule)", "the member array is full");
        data[_size++] = { Type::RETURN_RULE, ret };
    }
    void push(const string_part& str) {
        if (_size >= SIZE)
            throw Member_exception("push(string_part)", "the member array is full");
        data[_size++] = { Type::STRING, ret };
    }
    void push() {
        if (_size >= SIZE)
            throw Member_exception("push()", "the member array is full");
        data[_size++] = { Type::NONE, nullptr };
    }
    void pop() {
        data[_size--] = nullptr;
    }
    auto size() const noexcept { 
        return _size;
    }
    template<class MEM_RETURN_TOKEN, class MEM_RETURN_RULE, int MEM_SIZE>
    Members<_RETURN_TOKEN, _RETURN_RULE, SIZE>& operator=(const Members<MEM_RETURN_TOKEN, MEM_RETURN_RULE, MEM_SIZE>& mem) {
        if (mem.size() > SIZE)
            throw Member_exception("operator=()", "the member you assign overflow this group");
        for (int i = 0; i < mem.size(); ++i)
            data[i] = mem.data[i];
        _size = mem.size();
        return *this;
    }
    template<class MEM_RETURN_TOKEN, class MEM_RETURN_RULE, int MEM_SIZE>
    Members<_RETURN_TOKEN, _RETURN_RULE, SIZE>& operator+=(const Members<MEM_RETURN_TOKEN, MEM_RETURN_RULE, MEM_SIZE>& mem) {
        if (mem.size() + size() > SIZE)
            throw Member_exception("operator+=()", "the member you add overflow this group");
        for (int i = 0; i < mem.size(); ++i) {
            push(mem[]);
        }
        return *this;
    }
    auto& operator[](const int id) {
        if (size() == 0)
            throw Member_exception("operator[id]()", "the member array is empty");
        if (size() - 1 < id) {
            throw Member_exception("operator[id]()", "the index is out of range");
        }
        return data[id];
    }
    auto& operator[]() {
        if (size() == 0)
            throw Member_exception("operator[]()", "the member array is empty");
        if (size() > SIZE) {
            throw Member_exception("operator[]()", "the index is out of range");
        }
        return data[size()];
    }

    class iterator {
    private:
        Member<_RETURN_TOKEN, _RETURN_RULE> * ptr;

    public:
        explicit iterator(Member<_RETURN_TOKEN, _RETURN_RULE>* p) : ptr(p) {}

        // Iterator dereference operator
        int& operator*() {
            return *ptr;
        }

        // Pre-increment operator
        iterator& operator++() {
            ++ptr;
            return *this;
        }

        // Inequality comparison operator
        bool operator!=(const iterator& other) const {
            return ptr != other.ptr;
        }
        bool operator==(const iterator& other) const {
            return ptr == other.ptr;
        }
    };

    iterator begin() {
        return iterator(data);
    }

    iterator end() {
        return iterator(data + size());
    }


};


template<class RETURN_TOKEN, class RETURN_RULE, int SIZE>
class Group {
    private:
        Members<RETURN_TOKEN, RETURN_RULE, SIZE> member;
    public:
        using iterator = typename Members<RETURN_TOKEN, RETURN_RULE, SIZE>::iterator;
        /**
         * @brief Get the source of the group
         * 
         * @param txt 
         * @return std::string 
         */
        std::string full(char*& txt) {
            std::string o;
            for (const Member data : member) {
                std::string_view view;
                if (data.type == Type::NONE)
                    continue;
                if (data.type == Member::Type::STRING)
                    view = ((string_part) (data.data)).view();
                else
                    view = ((_return_base) (data.str));
                o += std::string(view.data(), view.length());
            }
            return o;
        }
    template<class RETURN_T>
    void push(const _return<RETURN_T>* ret) {
        member.push(ret);
    }
    void push(const string_part& str) {
        member.push(str);
    }
    void push(const char* start, const char* end) {
        member.push(string_part(start, end));
    }
    void push(const char* start, std::size_t len) {
        member.push(string_part(start, end));
    }
    void push() {
        member.push();
    }
    void pop() {
        member.pop();
    }
    auto size() const noexcept { 
        return member.size();
    }
    Group<RETURN_TOKEN, RETURN_RULE, SIZE>& operator=(const Group& mem) {
        member = mem.member;
        return *this;
    }
    Group<RETURN_TOKEN, RETURN_RULE, SIZE>& operator+=(const Group& mem) {
        member += mem.member;
        return *this;
    }
    auto& operator[](const int id) {
        return member[id];
    }
    auto& operator[]() {
        return member[];
    }

    // Iterator access functions
    iterator begin() {
        return member.begin();
    }

    iterator end() {
        return member.end();
    }

};
template<class RETURN_TOKEN, class RETURN_RULE>
class Groups {
    private:
    std::deque<void*> groups;
    public:
        template<int SIZE>
        void push(const Group<RETURN_TOKEN, RETURN_RULE, SIZE>* grp) {
            groups.push_back(grp);
        }
        void pop() {
            groups.pop_back();
        }

        auto size() const noexcept { 
            return groups.size();
        }
        Groups& operator=(const Groups& mem) {
            groups = mem.groups;
            return *this;
        }
        Groups& operator+=(const Groups& mem) {
            member += mem.groups;
            return *this;
        }
        auto& operator[](const int id) {
            return groups[id];
        }
        auto& operator[]() {
            return groups[groups.size() - 1];
        }

        // Iterator access functions
        auto begin() {
            return groups.begin();
        }

        auto end() {
            return groups.begin();
        }
};

template<class RESULT_T>
struct match_result {
    bool result = false;
    _return<RESULT_T> token;
};